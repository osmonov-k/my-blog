services:
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    image: yourname/blog-backend
    container_name: backend
    env_file:
      - ./backend/.env.prod
    environment:
      - NODE_ENV=production
      - PORT=3000
    restart: unless-stopped
    networks: [webnet]
    healthcheck:
      # Returns 0 only if /health responds 200
      test: ["CMD", "curl", "-fsS", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  nginx:
    image: nginx:alpine
    container_name: nginx
    ports:
      - "80:80"
      - "443:443"
    # We deploy either http.conf or https.conf into default.conf
    volumes:
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    # no depends_on here; let the script decide sequencing
    restart: unless-stopped
    networks: [webnet]

  certbot:
    image: certbot/certbot
    container_name: certbot
    volumes:
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    entrypoint: >
      /bin/sh -c 'trap exit TERM; while :; do
        certbot renew;
        sleep 12h & wait $${!};
      done;'
    restart: unless-stopped
    networks: [webnet]

networks:
  webnet:
    driver: bridge
