name: Deploy Backend to VPS

on:
  push:
    branches: [main]
    paths:
      - "backend/**"
      - "docker-compose.prod.yml"
      - ".github/workflows/deploy-backend.yml"

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Verify files exist
        shell: bash
        run: |
          set -euxo pipefail
          test -d backend
          test -f docker-compose.prod.yml

      - name: Build deploy bundle (backend only)
        shell: bash
        run: |
          set -euxo pipefail
          rm -rf deploy_bundle bundle.tgz
          mkdir -p deploy_bundle/backend
          rsync -av --delete --exclude 'node_modules' --exclude '.env' --exclude '.env.*' backend/ deploy_bundle/backend/
          cp docker-compose.prod.yml deploy_bundle/docker-compose.prod.yml
          tar -czf bundle.tgz -C deploy_bundle .

      - name: Upload bundle to VPS
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.VPS_IP }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: 22
          source: bundle.tgz
          target: ~/app

      - name: Run deploy commands on VPS
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_IP }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: 22
          script_stop: false
          script: |
            set -euxo pipefail

            # pick compose command
            if docker compose version >/dev/null 2>&1; then
              DC="docker compose"
            elif command -v docker-compose >/dev/null 2>&1; then
              DC="docker-compose"
            else
              echo "Docker Compose is not installed on the VPS." >&2
              exit 1
            fi
            CF="-f docker-compose.prod.yml"

            mkdir -p ~/app
            tar -xzf ~/app/bundle.tgz -C ~/app
            cd ~/app

            # ensure server-only env exists
            if [ ! -f ./backend/.env.prod ]; then
              printf "%s\n" \
                "# fill real values and keep this ONLY on VPS" \
                "PORT=3000" \
                "# DB_...=..." \
                "# JWT_SECRET=..." > ./backend/.env.prod
            fi

            # bring up (non-fatal if still getting healthy)
            $DC $CF down || true
            $DC $CF up -d || true

            echo "Waiting for backend health..."
            for i in {1..60}; do
              STATUS="$(docker inspect -f '{{.State.Health.Status}}' backend 2>/dev/null || echo unknown)"
              if [ "$STATUS" = "healthy" ]; then
                echo "Backend is healthy."
                break
              fi
              echo "Backend health: $STATUS (attempt $i)"
              sleep 5
              if [ "$i" -eq 60 ]; then
                echo "Backend failed to become healthy. Recent logs:"
                $DC $CF logs --tail=200 backend || true
                exit 1
              fi
            done

            # optional DB migrations
            $DC $CF exec -T backend npm run migrate || echo "No migrate script or it failed"
